Sure! I'll guide you step by step to build a **Django backend** for your e-commerce application from scratch.  

---

# **Step 1: Set Up Django Project**
### **1.1 Install Django & Django REST Framework (DRF)**
First, create a virtual environment and install dependencies:  
```sh
# Create a virtual environment
python -m venv venv

# Activate the virtual environment
# On Windows
venv\Scripts\activate
# On macOS/Linux
source venv/bin/activate

# Install Django and Django REST Framework
pip install django djangorestframework django-cors-headers djangorestframework-simplejwt
```

---

### **1.2 Create a Django Project & App**
```sh
# Create a Django project
django-admin startproject ecommerce_backend

# Move into the project directory
cd ecommerce_backend

# Create an app for products
python manage.py startapp products
python manage.py startapp users
python manage.py startapp orders
```

---

### **1.3 Configure Django Settings**
Modify `settings.py` inside `ecommerce_backend/ecommerce_backend/`:

#### **Add Installed Apps**
```python
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # Third-party apps
    'rest_framework',
    'corsheaders',
    
    # Our apps
    'products',
    'users',
    'orders',
]
```

#### **Enable CORS (Cross-Origin Resource Sharing)**
At the top of `settings.py`, add:
```python
CORS_ALLOW_ALL_ORIGINS = True
```
Also, add `'corsheaders.middleware.CorsMiddleware'` in `MIDDLEWARE`:
```python
MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
```

---

# **Step 2: Define the Database Models**
### **2.1 Create Models**
Go to `products/models.py` and define product details:
```python
from django.db import models

class Product(models.Model):
    name = models.CharField(max_length=255)
    description = models.TextField()
    price = models.DecimalField(max_digits=10, decimal_places=2)
    stock = models.IntegerField()
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return self.name
```

Go to `users/models.py` and define users:
```python
from django.contrib.auth.models import AbstractUser
from django.db import models

class User(AbstractUser):
    email = models.EmailField(unique=True)
    address = models.TextField(blank=True, null=True)

    def __str__(self):
        return self.username
```

Go to `orders/models.py` and define orders:
```python
from django.db import models
from django.conf import settings
from products.models import Product

class Order(models.Model):
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    total_amount = models.DecimalField(max_digits=10, decimal_places=2)
    status = models.CharField(max_length=20, choices=[('Pending', 'Pending'), ('Completed', 'Completed')], default='Pending')
    created_at = models.DateTimeField(auto_now_add=True)

class OrderItem(models.Model):
    order = models.ForeignKey(Order, on_delete=models.CASCADE, related_name="items")
    product = models.ForeignKey(Product, on_delete=models.CASCADE)
    quantity = models.IntegerField()
    price = models.DecimalField(max_digits=10, decimal_places=2)
```

---

# **Step 3: Register Models in Admin Panel**
Edit `products/admin.py`:
```python
from django.contrib import admin
from .models import Product

admin.site.register(Product)
```

Edit `users/admin.py`:
```python
from django.contrib import admin
from .models import User

admin.site.register(User)
```

Edit `orders/admin.py`:
```python
from django.contrib import admin
from .models import Order, OrderItem

admin.site.register(Order)
admin.site.register(OrderItem)
```

---

# **Step 4: Migrate the Database**
Run the following commands:
```sh
python manage.py makemigrations
python manage.py migrate
```

---

# **Step 5: Create API Views**
### **5.1 Create Serializers**
Create a `products/serializers.py` file:
```python
from rest_framework import serializers
from .models import Product

class ProductSerializer(serializers.ModelSerializer):
    class Meta:
        model = Product
        fields = '__all__'
```

Create `users/serializers.py`:
```python
from rest_framework import serializers
from django.contrib.auth import get_user_model

User = get_user_model()

class UserSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ['id', 'username', 'email', 'address']
```

Create `orders/serializers.py`:
```python
from rest_framework import serializers
from .models import Order, OrderItem

class OrderItemSerializer(serializers.ModelSerializer):
    class Meta:
        model = OrderItem
        fields = '__all__'

class OrderSerializer(serializers.ModelSerializer):
    items = OrderItemSerializer(many=True, read_only=True)

    class Meta:
        model = Order
        fields = '__all__'
```

---

# **Step 6: Create API Endpoints**
Edit `products/views.py`:
```python
from rest_framework import generics
from .models import Product
from .serializers import ProductSerializer

class ProductListCreate(generics.ListCreateAPIView):
    queryset = Product.objects.all()
    serializer_class = ProductSerializer

class ProductDetail(generics.RetrieveUpdateDestroyAPIView):
    queryset = Product.objects.all()
    serializer_class = ProductSerializer
```

Edit `users/views.py`:
```python
from rest_framework import generics
from django.contrib.auth import get_user_model
from .serializers import UserSerializer

User = get_user_model()

class UserDetail(generics.RetrieveUpdateAPIView):
    queryset = User.objects.all()
    serializer_class = UserSerializer
```

Edit `orders/views.py`:
```python
from rest_framework import generics
from .models import Order
from .serializers import OrderSerializer

class OrderListCreate(generics.ListCreateAPIView):
    queryset = Order.objects.all()
    serializer_class = OrderSerializer

class OrderDetail(generics.RetrieveUpdateDestroyAPIView):
    queryset = Order.objects.all()
    serializer_class = OrderSerializer
```

---

# **Step 7: Set Up URLs**
Edit `products/urls.py`:
```python
from django.urls import path
from .views import ProductListCreate, ProductDetail

urlpatterns = [
    path('', ProductListCreate.as_view(), name="product-list"),
    path('<int:pk>/', ProductDetail.as_view(), name="product-detail"),
]
```

Edit `users/urls.py`:
```python
from django.urls import path
from .views import UserDetail

urlpatterns = [
    path('<int:pk>/', UserDetail.as_view(), name="user-detail"),
]
```

Edit `orders/urls.py`:
```python
from django.urls import path
from .views import OrderListCreate, OrderDetail

urlpatterns = [
    path('', OrderListCreate.as_view(), name="order-list"),
    path('<int:pk>/', OrderDetail.as_view(), name="order-detail"),
]
```

Edit `ecommerce_backend/urls.py`:
```python
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/products/', include('products.urls')),
    path('api/users/', include('users.urls')),
    path('api/orders/', include('orders.urls')),
]
```

---

# **Step 8: Run the Server**
```sh
python manage.py runserver
```

Now your Django backend is up and running! ðŸš€  
Let me know if you want me to continue with authentication, JWT, or React integration! ðŸ˜Š